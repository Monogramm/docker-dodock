version: "2.3"

volumes:
  dodock_sites:
  dodock_logs:
  dodock_db:

services:
  # https://docs.docker.com/docker-hub/builds/automated-testing/
  sut:
    build:
      context: ./test
      dockerfile: Dockerfile
    command: sh /docker_test.sh
    depends_on:
      - dodock_db
      - dodock_app
      - dodock_web
      - dodock_scheduler
      - dodock_worker_default
      - dodock_worker_long
      - dodock_worker_short
      - dodock_socketio
      - dodock_redis_cache
      - dodock_redis_queue
      - dodock_redis_socketio
    environment:
      # Container setup
      - WORKER_TYPE=sut
      # Docker setup
      - DOCKER_APPS_TIMEOUT=900
      - DOCKER_DEBUG=1
      # Test setup
      - TEST_VERSION=%%DODOCK_VERSION%%
      # Dodock setup
      - DODOCK_DEFAULT_SITE=${DODOCK_SITE}
    volumes:
      - dodock_sites:/home/dodock/dodock-bench/sites
      - dodock_logs:/home/dodock/dodock-bench/logs
      #- /etc/localtime:/etc/localtime:ro
      #- /etc/timezone:/etc/timezone:ro

  dodock_app:
    # For development or CI, build from local Dockerfile
    # For production, download prebuilt image
    build:
      context: .
    image: ${IMAGE_NAME}
    container_name: dodock_app
    restart: on-failure
    command: app
    expose:
      - '8000'
    ports:
      - "8000:8000"
    depends_on:
      dodock_db:
        condition: service_healthy
      dodock_redis_cache:
        condition: service_started
      dodock_redis_queue:
        condition: service_started
      dodock_redis_socketio:
        condition: service_started
    links:
      - dodock_db
    environment:
      # Docker setup
      #- DOCKER_DB_ALLOWED_HOSTS=%.%.%.%
      - DOCKER_DB_ALLOWED_HOSTS=
      - DOCKER_GUNICORN_TIMEOUT=600
      # Dodock setup
      - DODOCK_APP_INIT=frappe
      - DODOCK_APP_RESET=1
      - DODOCK_DEFAULT_PROTOCOL=http
      - DODOCK_DEFAULT_SITE=${DODOCK_SITE}
      - DODOCK_HTTP_PORT=80
      - DODOCK_WEBSERVER_PORT=80
      - DODOCK_SOCKETIO_PORT=3000
      - DODOCK_BUILD_OPTIONS=
      - DODOCK_LOGGING=1
      - DEVELOPER_MODE=0
      - ALLOW_TESTS=1
      - SERVER_SCRIPT_ENABLED=1
      #- ADMIN_USER=Administrator
      - ADMIN_PASSWORD=${DODOCK_ADMIN_PWD}
      - ENCRYPTION_KEY=${DODOCK_ENCRYPTION_KEY}
      # Database setup
      - DB_TYPE=mariadb
      - DB_HOST=dodock_db
      - DB_PORT=3306
      - DB_NAME=${DODOCK_DB_NAME}
      - DB_PASSWORD=${DODOCK_DB_PWD}
      - DB_ROOT_USER=${DODOCK_DB_ROOT_USER}
      - DB_ROOT_PASSWORD=${DODOCK_DB_ROOT_PWD}
      # Mail setup
      - MAIL_MUTED=false
      - MAIL_HOST=${DODOCK_MAIL_HOST}
      - MAIL_PORT=1025
      - MAIL_USE_SSL=
      - MAIL_LOGIN=${DODOCK_SMTP_USER}
      - MAIL_PASSWORD=${DODOCK_SMTP_PWD}
      - MAIL_EMAIL_ID=dodock@${DODOCK_MAIL_HOST}
      - MAIL_SENDER_NAME=Dodock
      # Redis setup
      - REDIS_CACHE_HOST=dodock_redis_cache
      - REDIS_QUEUE_HOST=dodock_redis_queue
      - REDIS_SOCKETIO_HOST=dodock_redis_socketio
    volumes:
      - dodock_sites:/home/dodock/dodock-bench/sites
      - dodock_logs:/home/dodock/dodock-bench/logs
      #- /etc/localtime:/etc/localtime:ro
      #- /etc/timezone:/etc/timezone:ro

  dodock_web:
    image: nginx:alpine
    container_name: dodock_web
    restart: on-failure
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - dodock_sites:/var/www/html
      # If you need SSL connection, you can provide your own certificates
      # - ./certs:/etc/letsencrypt
      # - ./certs-data:/data/letsencrypt
    depends_on:
      - dodock_socketio
    ports:
      - "8080:80"
      # If you need SSL connection
      # - "8443:443"
    links:
      - dodock_app
      - dodock_socketio

  dodock_db:
    image: mariadb:10
    container_name: dodock_db
    restart: on-failure
    command: --defaults-extra-file=/etc/dodockdb.cnf
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost", "--user=${DODOCK_DB_NAME}", "--password=${DODOCK_DB_PWD}"]
      timeout: 10s
      retries: 5
    expose:
      - '3306'
    environment:
      - MYSQL_ROOT_PASSWORD=${DODOCK_DB_ROOT_PWD}
      # Following parameters are not needed with Frappe 12 or higher since it will create DB itself
      - MYSQL_DATABASE=${DODOCK_DB_NAME}
      - MYSQL_USER=${DODOCK_DB_NAME}
      - MYSQL_PASSWORD=${DODOCK_DB_PWD}
    volumes:
      - ./mariadb.conf:/etc/dodockdb.cnf:ro
      - dodock_db:/var/lib/mysql
      #- /etc/localtime:/etc/localtime:ro
      #- /etc/timezone:/etc/timezone:ro

  dodock_scheduler:
    image: ${IMAGE_NAME}
    container_name: dodock_scheduler
    restart: on-failure
    command: scheduler
    depends_on:
      - dodock_redis_queue
      - dodock_redis_cache
    environment:
      # Docker setup
      - DOCKER_APPS_TIMEOUT=900
    volumes:
      - dodock_sites:/home/dodock/dodock-bench/sites
      #- /etc/localtime:/etc/localtime:ro
      #- /etc/timezone:/etc/timezone:ro

  dodock_worker_default:
    image: ${IMAGE_NAME}
    container_name: dodock_worker_default
    restart: on-failure
    command: worker-default
    depends_on:
      - dodock_redis_queue
      - dodock_redis_cache
    environment:
      - WORKER_TYPE=default
      # Docker setup
      - DOCKER_APPS_TIMEOUT=900
    volumes:
      - dodock_sites:/home/dodock/dodock-bench/sites
      #- /etc/localtime:/etc/localtime:ro
      #- /etc/timezone:/etc/timezone:ro

  dodock_worker_short:
    image: ${IMAGE_NAME}
    container_name: dodock_worker_short
    restart: on-failure
    command: worker-short
    depends_on:
      - dodock_redis_queue
      - dodock_redis_cache
    environment:
      - WORKER_TYPE=short
      # Docker setup
      - DOCKER_APPS_TIMEOUT=900
    volumes:
      - dodock_sites:/home/dodock/dodock-bench/sites
      #- /etc/localtime:/etc/localtime:ro
      #- /etc/timezone:/etc/timezone:ro

  dodock_worker_long:
    image: ${IMAGE_NAME}
    container_name: dodock_worker_long
    restart: on-failure
    command: worker-long
    depends_on:
      - dodock_redis_queue
      - dodock_redis_cache
    environment:
      - WORKER_TYPE=long
      # Docker setup
      - DOCKER_APPS_TIMEOUT=900
    volumes:
      - dodock_sites:/home/dodock/dodock-bench/sites
      #- /etc/localtime:/etc/localtime:ro
      #- /etc/timezone:/etc/timezone:ro

  dodock_socketio:
    image: ${IMAGE_NAME}
    container_name: dodock_socketio
    command: node-socketio
    restart: on-failure
    ports:
      - "3000:3000"
    depends_on:
      - dodock_redis_socketio
    environment:
      # Docker setup
      - DOCKER_APPS_TIMEOUT=900
    volumes:
      - dodock_sites:/home/dodock/dodock-bench/sites
      #- /etc/localtime:/etc/localtime:ro
      #- /etc/timezone:/etc/timezone:ro

  dodock_redis_cache:
    image: redis:alpine
    container_name: dodock_redis_cache
    command: ["redis-server","/etc/conf.d/redis.conf"]
    restart: on-failure
    volumes:
      - ./redis_cache.conf:/etc/conf.d/redis.conf:ro
      #- /etc/localtime:/etc/localtime:ro
      #- /etc/timezone:/etc/timezone:ro

  dodock_redis_queue:
    image: redis:alpine
    container_name: dodock_redis_queue
    restart: on-failure
    #volumes:
    #  - /etc/localtime:/etc/localtime:ro
    #  - /etc/timezone:/etc/timezone:ro

  dodock_redis_socketio:
    image: redis:alpine
    container_name: dodock_redis_socketio
    restart: on-failure
    #volumes:
    #  - /etc/localtime:/etc/localtime:ro
    #  - /etc/timezone:/etc/timezone:ro

  dodock_mailer:
    image: sj26/mailcatcher:latest
    hostname: frappe_mailer
    container_name: frappe_mailer
    restart: always
    expose:
      - 1025
    ports:
      - "1080:1080"
    #volumes:
    #  - /etc/localtime:/etc/localtime:ro
    #  - /etc/timezone:/etc/timezone:ro
